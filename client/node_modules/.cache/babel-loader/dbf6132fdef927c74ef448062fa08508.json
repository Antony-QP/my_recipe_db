{"ast":null,"code":"import { ADD_RECIPE, DELETE_RECIPE, SET_CURRENT, CLEAR_CURRENT, UPDATE_RECIPE, FILTER_RECIPES, CLEAR_FILTER, RECIPE_ERROR, SET_ALERT, REMOVE_ALERT, GET_RECIPES, CLEAR_RECIPES } from \"../types\";\nimport recipeContext from \"./recipeContext\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_RECIPES:\n      return { ...state,\n        recipes: action.payload\n      };\n\n    case ADD_RECIPE:\n      return { ...state,\n        recipes: [action.payload, ...state.recipes],\n        loading: false\n      };\n\n    case UPDATE_RECIPE:\n      return { ...state,\n        recipes: state.recipes.map(recipe => recipe._id === action.payload._id ? action.payload : recipe),\n        loading: false\n      };\n\n    case DELETE_RECIPE:\n      return { ...state,\n        recipes: state.recipes.filter(recipe => recipe._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_RECIPES:\n      return { ...state,\n        recipes: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_RECIPES:\n      return { ...state,\n        filtered: state.recipes.filter(recipe => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return recipe.title.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case RECIPE_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/antonyparker/Documents/Coding/my_recipe_db/client/src/context/recipe/recipeReducer.js"],"names":["ADD_RECIPE","DELETE_RECIPE","SET_CURRENT","CLEAR_CURRENT","UPDATE_RECIPE","FILTER_RECIPES","CLEAR_FILTER","RECIPE_ERROR","SET_ALERT","REMOVE_ALERT","GET_RECIPES","CLEAR_RECIPES","recipeContext","state","action","type","recipes","payload","loading","map","recipe","_id","filter","filtered","error","current","regex","RegExp","title","match"],"mappings":"AAAA,SACEA,UADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,aAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,YAPF,EAQEC,YARF,EASEC,SATF,EAUEC,YAVF,EAWEC,WAXF,EAYEC,aAZF,QAaO,UAbP;AAcA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,WAAL;AACE,aAAM,EACJ,GAAGG,KADC;AAEJG,QAAAA,OAAO,EAAGF,MAAM,CAACG;AAFb,OAAN;;AAIF,SAAKjB,UAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELG,QAAAA,OAAO,EAAE,CAAEF,MAAM,CAACG,OAAT,EAAkB,GAAGJ,KAAK,CAACG,OAA3B,CAFJ;AAGLE,QAAAA,OAAO,EAAC;AAHH,OAAP;;AAKF,SAAKd,aAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcG,GAAd,CAAmBC,MAAD,IACzBA,MAAM,CAACC,GAAP,KAAeP,MAAM,CAACG,OAAP,CAAeI,GAA9B,GAAoCP,MAAM,CAACG,OAA3C,GAAqDG,MAD9C,CAFJ;AAKLF,QAAAA,OAAO,EAAC;AALH,OAAP;;AAOF,SAAKjB,aAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELG,QAAAA,OAAO,EAAEH,KAAK,CAACG,OAAN,CAAcM,MAAd,CAAsBF,MAAD,IAAYA,MAAM,CAACC,GAAP,KAAeP,MAAM,CAACG,OAAvD,CAFJ;AAGLC,QAAAA,OAAO,EAAC;AAHH,OAAP;;AAKF,SAAKP,aAAL;AACE,aAAM,EACJ,GAAGE,KADC;AAEJG,QAAAA,OAAO,EAAG,IAFN;AAGJO,QAAAA,QAAQ,EAAG,IAHP;AAIJC,QAAAA,KAAK,EAAG,IAJJ;AAKJC,QAAAA,OAAO,EAAG;AALN,OAAN;;AAOF,SAAKvB,WAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELY,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAFX,OAAP;;AAIF,SAAKd,aAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELY,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKpB,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELU,QAAAA,QAAQ,EAAEV,KAAK,CAACG,OAAN,CAAcM,MAAd,CAAsBF,MAAD,IAAY;AACzC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,MAAM,CAACQ,KAAP,CAAaC,KAAb,CAAmBH,KAAnB,CAAP;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKpB,YAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELU,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKhB,YAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELW,QAAAA,KAAK,EAAEV,MAAM,CAACG;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AA/DJ;AAiED,CAlED","sourcesContent":["import {\n  ADD_RECIPE,\n  DELETE_RECIPE,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_RECIPE,\n  FILTER_RECIPES,\n  CLEAR_FILTER,\n  RECIPE_ERROR,\n  SET_ALERT,\n  REMOVE_ALERT,\n  GET_RECIPES,\n  CLEAR_RECIPES,\n} from \"../types\";\nimport recipeContext from \"./recipeContext\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_RECIPES:\n      return{\n        ...state,\n        recipes : action.payload,\n      }\n    case ADD_RECIPE:\n      return {\n        ...state,\n        recipes: [ action.payload, ...state.recipes],\n        loading:false\n      };\n    case UPDATE_RECIPE:\n      return {\n        ...state,\n        recipes: state.recipes.map((recipe) =>\n          recipe._id === action.payload._id ? action.payload : recipe\n        ),\n        loading:false\n      };\n    case DELETE_RECIPE:\n      return {\n        ...state,\n        recipes: state.recipes.filter((recipe) => recipe._id !== action.payload),\n        loading:false\n      };\n    case CLEAR_RECIPES:\n      return{\n        ...state,\n        recipes : null,\n        filtered : null,\n        error : null,\n        current : null\n      }\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case FILTER_RECIPES:\n      return {\n        ...state,\n        filtered: state.recipes.filter((recipe) => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return recipe.title.match(regex);\n        }),\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n      };\n    case RECIPE_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      }\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}