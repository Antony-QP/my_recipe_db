{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/antonyparker/Documents/Coding/my_recipe_db/client/src/context/recipe/RecipeState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport RecipeContext from \"./recipeContext\";\nimport recipeReducer from \"./recipeReducer\";\nimport { Redirect } from 'react-router-dom';\nimport axios from \"axios\";\nimport { GET_RECIPES, CLEAR_RECIPES, ADD_RECIPE, DELETE_RECIPE, SET_CURRENT, SET_ALERT, CLEAR_CURRENT, UPDATE_RECIPE, FILTER_RECIPES, CLEAR_FILTER, RECIPE_ERROR } from \"../types\";\n\nconst RecipeState = props => {\n  _s();\n\n  const initialState = {\n    recipes: [],\n    current: null,\n    filtered: null,\n    error: null\n  }; // Allows us to access state and dispatch to the reducer\n\n  const [state, dispatch] = useReducer(recipeReducer, initialState); // Get contacts\n\n  const getRecipes = async () => {\n    try {\n      const res = await axios.get(\"/api/recipes\");\n      dispatch({\n        type: GET_RECIPES,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RECIPE_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add recipe\n\n\n  const addRecipe = async recipe => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/recipes\", recipe, config);\n      dispatch({\n        type: ADD_RECIPE,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RECIPE_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update recipe\n\n\n  const updateRecipe = async recipe => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/recipes/${recipe._id}`, recipe, config);\n      dispatch({\n        type: UPDATE_RECIPE,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RECIPE_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete recipe\n\n\n  const deleteRecipe = async id => {\n    try {\n      const res = await axios.delete(`/api/recipes/${id}`);\n      dispatch({\n        type: DELETE_RECIPE,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: RECIPE_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Clear Recipes\n\n\n  const clearRecipes = () => {\n    dispatch({\n      type: CLEAR_RECIPES\n    });\n  }; // Set current recipe\n\n\n  const setCurrent = recipe => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: recipe\n    });\n  }; // Clear current recipe\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Filter recipes\n\n\n  const filterRecipes = text => {\n    dispatch({\n      type: FILTER_RECIPES,\n      payload: text\n    });\n  }; // Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(RecipeContext.Provider, {\n    value: {\n      recipes: state.recipes,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addRecipe,\n      deleteRecipe,\n      setCurrent,\n      clearCurrent,\n      updateRecipe,\n      filterRecipes,\n      clearFilter,\n      getRecipes,\n      clearRecipes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecipeState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = RecipeState;\nexport default RecipeState;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeState\");","map":{"version":3,"sources":["/Users/antonyparker/Documents/Coding/my_recipe_db/client/src/context/recipe/RecipeState.js"],"names":["React","useReducer","RecipeContext","recipeReducer","Redirect","axios","GET_RECIPES","CLEAR_RECIPES","ADD_RECIPE","DELETE_RECIPE","SET_CURRENT","SET_ALERT","CLEAR_CURRENT","UPDATE_RECIPE","FILTER_RECIPES","CLEAR_FILTER","RECIPE_ERROR","RecipeState","props","initialState","recipes","current","filtered","error","state","dispatch","getRecipes","res","get","type","payload","data","err","response","msg","addRecipe","recipe","config","headers","post","updateRecipe","put","_id","deleteRecipe","id","delete","clearRecipes","setCurrent","clearCurrent","filterRecipes","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\nimport RecipeContext from \"./recipeContext\";\nimport recipeReducer from \"./recipeReducer\";\nimport {Redirect} from 'react-router-dom'\nimport axios from \"axios\";\nimport {\n  GET_RECIPES,\n  CLEAR_RECIPES,\n  ADD_RECIPE,\n  DELETE_RECIPE,\n  SET_CURRENT,\n  SET_ALERT,\n  CLEAR_CURRENT,\n  UPDATE_RECIPE,\n  FILTER_RECIPES,\n  CLEAR_FILTER,\n  RECIPE_ERROR,\n} from \"../types\";\n\nconst RecipeState = (props) => {\n  const initialState = {\n    recipes: [],\n    current: null,\n    filtered: null,\n    error: null,\n  };\n\n  // Allows us to access state and dispatch to the reducer\n  const [state, dispatch] = useReducer(recipeReducer, initialState);\n\n  // Get contacts\n  const getRecipes = async () => {\n    try {\n      const res = await axios.get(\"/api/recipes\");\n      dispatch({ type: GET_RECIPES, payload: res.data });\n    } catch (err) {\n      dispatch({ type: RECIPE_ERROR, payload: err.response.msg });\n    }\n  };\n\n  // Add recipe\n  const addRecipe = async (recipe) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const res = await axios.post(\"/api/recipes\", recipe, config);\n      dispatch({ type: ADD_RECIPE, payload: res.data });\n    } catch (err) {\n      dispatch({ type: RECIPE_ERROR, payload: err.response.msg });\n    }\n  };\n\n  // Update recipe\n  const updateRecipe = async (recipe) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    try {\n      const res = await axios.put(`/api/recipes/${recipe._id}`, recipe, config);\n      dispatch({ type: UPDATE_RECIPE, payload: res.data });\n    } catch (err) {\n      dispatch({ type: RECIPE_ERROR, payload: err.response.msg });\n    }\n  };\n\n  // Delete recipe\n  const deleteRecipe = async (id) => {\n    try {\n      const res = await axios.delete(`/api/recipes/${id}`);\n      dispatch({ type: DELETE_RECIPE, payload: id });\n    } catch (err) {\n      dispatch({ type: RECIPE_ERROR, payload: err.response.msg });\n    }\n  };\n\n  // Clear Recipes\n  const clearRecipes = () => {\n    dispatch({ type: CLEAR_RECIPES });\n  };\n\n  // Set current recipe\n  const setCurrent = (recipe) => {\n    dispatch({ type: SET_CURRENT, payload: recipe });\n  };\n\n  // Clear current recipe\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // Filter recipes\n  const filterRecipes = (text) => {\n    dispatch({ type: FILTER_RECIPES, payload: text });\n  };\n\n  // Clear filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <RecipeContext.Provider\n      value={{\n        recipes: state.recipes,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addRecipe,\n        deleteRecipe,\n        setCurrent,\n        clearCurrent,\n        updateRecipe,\n        filterRecipes,\n        clearFilter,\n        getRecipes,\n        clearRecipes,\n      }}>\n      {props.children}\n    </RecipeContext.Provider>\n  );\n};\n\nexport default RecipeState;\n"]},"metadata":{},"sourceType":"module"}